/** * Tweener Class by Giraldo Rosales. * Visit www.liquidgear.net for documentation and updates. * * Based on GTweener by Grant Skinner. *  * Copyright (c) 2010 Nitrogen Labs, Inc. All rights reserved. *  * Permission is hereby granted, free of charge, to any person * obtaining a copy of this software and associated documentation * files (the "Software"), to deal in the Software without * restriction, including without limitation the rights to use, * copy, modify, merge, publish, distribute, sublicense, and/or sell * copies of the Software, and to permit persons to whom the * Software is furnished to do so, subject to the following * conditions: *  * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR * OTHER DEALINGS IN THE SOFTWARE. **/package lg.flash.motion {	import flash.utils.Dictionary;	import lg.flash.motion.Tween;		/**	* Tweener is an experimental class that provides a static interface and basic	* override management for Tween. It adds about 1kb to Tween. With Tweener, if you tween a value that is	* already being tweened, the new tween will override the old tween for only that	* value. The old tween will continue tweening other values uninterrupted.	* <br/><br/>	* Tweener also serves as an interesting example for utilizing Tween's "*" plugin	* registration feature, where a plugin can be registered to run for every tween.	* <br/><br/>	* Tweener introduces a small amount overhead to Tween, which may have a limited impact	* on performance critical scenarios with large numbers (thousands) of tweens.	**/	public class Tweener {		/** @private **/		protected static var tweens:Dictionary;		/** @private **/		protected static var instance:Tweener;				staticInit();		/** @private **/		protected static function staticInit():void {			tweens		= new Dictionary(true);			instance	= new Tweener();						Tween.installPlugin(instance, ['*']);		}				/** @private **/		public function init(tween:Tween, name:String, value:Number):Number {			return value;		}				/** @private **/		public function tween(tween:Tween, name:String, value:Number, initValue:Number, rangeValue:Number, ratio:Number, end:Boolean):Number {			// if the tween has just completed and it is currently being managed by Tweener then remove it:			if (end && tween.pluginData.Tweener) {				remove(tween);			}						return value;		}				/** Tweens the target to the specified values. **/		public static function to(target:Object=null, duration:Number=1, values:Object=null, props:Object=null, pluginData:Object=null):Tween {			var tween:Tween = new Tween(target, duration, values, props, pluginData);			add(tween);			return tween;		}				/** Tweens the target from the specified values to its current values. **/		public static function from(target:Object=null, duration:Number=1, values:Object=null, props:Object=null, pluginData:Object=null):Tween {			var tween:Tween = to(target, duration, values, props, pluginData);			tween.swapValues();			return tween;		}				/** Adds a tween to be managed by Tweener. **/		public static function add(tween:Tween):void {			var target:Object	= tween.target;			var list:Array		= tweens[target];						if (list) {				clearValues(target,tween.getValues());			} else {				list = tweens[target] = [];			}						list.push(tween);			tween.pluginData.Tweener = true;		}				/** Gets the tween that is actively tweening the specified property of the target, or null if none. **/		public static function getTween(target:Object, name:String):Tween {			var list:Array = tweens[target];						if (list == null) return null;						var len:int	= list.length;			var g:int;						for(g=0; g<len; g++) {				var tween:Tween = list[g];				if (!isNaN(tween.getValue(name))) return tween;			}						return null;		}				/** Returns an array of all tweens that Tweener is managing for the specified target. **/		public static function getTweens(target:Object):Array {			return tweens[target] || [];		}				/** Pauses all tweens that Tweener is managing for the specified target. **/		public static function pauseTweens(target:Object,paused:Boolean=true):void {			var list:Array = tweens[target];						if (list == null) return;						var len:int = list.length;			var g:int;						for (g=0; g<len; g++) {				list[g].paused = paused;			}		}				/** Resumes all tweens that Tweener is managing for the specified target. **/		public static function resumeTweens(target:Object):void {			pauseTweens(target,false);		}				/** Removes a tween from being managed by Tweener. **/		public static function remove(tween:Tween):void {			delete(tween.pluginData.Tweener);						var list:Array	= tweens[tween.target];						if (list == null) return;						var len:int		= list.length;			var g:int;						for (g=0; g<len; g++) {				if (list[g] == tween) {					list.splice(g,1);					return;				}			}		}				/** Removes all tweens that Tweener is managing for the specified target. **/		public static function removeTweens(target:Object):void {			pauseTweens(target);						var list:Array	= tweens[target];						if (list == null) return;						var len:int = list.length;			var g:int;						for (g=0; g<len; g++) {				delete(list[g].pluginData.Tweener);			}						delete(tweens[target]);		}				/** @private **/		protected static function clearValues(target:Object, values:Object):void {			var s:String;						for (s in values) {				var tween:Tween	= getTween(target,s);				if (tween) tween.deleteValue(s);			}		}	}}