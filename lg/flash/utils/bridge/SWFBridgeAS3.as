/*** SWFBridgeAS3 by Grant Skinner. March 11, 2007* Visit www.gskinner.com/blog for documentation, updates and more free code.** You may distribute this class freely, provided it is not modified in any way (including* removing this header or changing the package path).** Please contact info@gskinner.com prior to distributing modified versions of this class.*/package lg.flash.utils.bridge {	import flash.net.LocalConnection;	import flash.events.EventDispatcher;	import flash.events.Event;	import flash.system.Security;		import lg.flash.elements.Element;		public class SWFBridgeAS3 extends Element {		private var myID:String;		private var extID:String;		private var lc:LocalConnection;		private var _connected:Boolean=false;		private var host:Boolean=true;		private var clientObj:Object;				public function SWFBridgeAS3(p_id:String,p_clientObj:Object) {			id			= p_id.split(':').join('');			lc			= new LocalConnection();			lc.client	= this;			lc.allowDomain('*');			lc.allowInsecureDomain('*');			Security.allowDomain('*');						clientObj	= p_clientObj;						try {				lc.connect(id+"_host");			} catch(e:ArgumentError) {				host = false;			}							myID	= id+((host) ? '_host' : '_guest');			extID	= id+((host) ? '_guest' : '_host');						if(!host) {				lc.connect(myID);				lc.send(extID, 'lg_utils_bridge_SWFBridge_init');			}		}				public function send(p_method:String,...p_args:Array):void {			if (!_connected) { throw new ArgumentError("Send failed because the object is not connected."); }			p_args.unshift(p_method);			p_args.unshift("lg_utils_bridge_SWFBridge_receive");			p_args.unshift(extID);			lc.send.apply(lc,p_args);		}				public function close():void {			try { lc.close(); } catch (e:*) {}			lc = null;			clientObj = null;			if (!_connected) { throw new ArgumentError("Close failed because the object is not connected."); }			_connected = false;		}				public function get connected():Boolean {			return _connected;		}				public function lg_utils_bridge_SWFBridge_receive(p_method:String,...p_args:Array):void {			try {				clientObj[p_method].apply(clientObj,p_args);			} catch (e:*) {				trace("SWFBridge ERROR:  "+e);			}		}				public function lg_utils_bridge_SWFBridge_init():void {			trace("SWFBridge (AS3) connected: "+(host?"host":"client"));			if (host) {				lc.send(extID,"lg_utils_bridge_SWFBridge_init");			}			_connected = true;						trigger('element_loaded');		}	}}