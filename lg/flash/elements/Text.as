/*** Text by Giraldo Rosales.* Visit www.liquidgear.net for documentation and updates.*** Copyright (c) 2010 Nitrogen Labs, Inc. All rights reserved.* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package lg.flash.elements {	//Text Layout Framework	import flash.display.Sprite;	import flash.geom.Rectangle;		import flashx.textLayout.container.ContainerController;	import flashx.textLayout.conversion.TextConverter;	import flashx.textLayout.edit.EditManager;	import flashx.textLayout.edit.SelectionManager;	import flashx.textLayout.elements.ParagraphElement;	import flashx.textLayout.elements.SpanElement;	import flashx.textLayout.elements.TextFlow;	import flashx.textLayout.formats.TextLayoutFormat;	import flashx.undo.UndoManager;		import lg.flash.events.ElementEvent;	import lg.flash.motion.Tween;	import lg.flash.motion.easing.Quintic;		/**	* Dispatched when the text scrolls up or down.	* @eventType mx.events.ElementEvent.SCROLL	*/	[Event(name="element_scroll", type="lg.flash.events.ElementEvent")]		/**	* Dispatched when the text is submitted.	* @eventType mx.events.ElementEvent.SUBMIT	*/	[Event(name="element_submit", type="lg.flash.events.ElementEvent")]		public class Text extends VisualElement {		public var textFlow:TextFlow						= new TextFlow();		public var textLayoutFormat:TextLayoutFormat		= new TextLayoutFormat();		public var controller:ContainerController;				private var _paragraph:Vector.<ParagraphElement>	= new Vector.<ParagraphElement>();		private var _span:Vector.<SpanElement>				= new Vector.<SpanElement>();		private var _contentRect:Rectangle					= new Rectangle();				/** 		*	Constructs a new Text object.		*	@param obj Object containing all properties to construct the class			**/		public function Text(obj:Object) {			super();			//cacheAsBitmap	= true;						data.align				= 'left';			data.backgroundAlpha	= 0;			data.backgroundColor	= 0xffffff;			data.bold				= false;			data.color				= 0x000000;			data.columns			= 1;			data.columnGap			= 20;			data.columnWidth		= 0;			data.embedFonts			= false;			data.font				= 'device';			data.ignoreWhitespace	= true;			data.input				= false;			data.italic				= false;			data.rotation			= 0;			data.scrollable			= false;			data.size				= 12;			data.htmlText			= null;			data.text				= '';			data.typeCase			= 'default';			data.underline			= 'none';			data.verticalAlign		= 'top';			data.textWidth			= NaN;			data.textHeight			= NaN;			data.autoWidth			= true;			data.autoHeight			= true;			setAttributes(obj);						isSetup = true;			resetFormat();		}				public function paragraph():void {			var p:ParagraphElement	= new ParagraphElement();			var paraLen:int			= _paragraph.length;			_paragraph[paraLen]		= p;			textFlow.addChild(p);		}				public function span(obj:Object=null):void {			var span:SpanElement	= new SpanElement();						if(obj) {				for(var s:String in obj) {					if(span.hasOwnProperty(s)) {						span[s]	= obj[s];					}				}			}						_span[0]	= span;			_paragraph[0].addChild(span);		}				private function resetFormat():void {			if(!isSetup) {				return;			}						if(!textFlow) {				textFlow	= new TextFlow();			}						if(data.input) {				textFlow.interactionManager = new EditManager(new UndoManager());			} 			else if(data.selectable) {				textFlow.interactionManager = new SelectionManager();			}						textFlow.format	= textLayoutFormat;						if(data.htmlText) {				textFlow.linkNormalFormat	= {color:textLayoutFormat.color};			}						textFlow.flowComposer.removeAllControllers();						if(!isNaN(data.textWidth)) {				if(!isNaN(data.textHeight)) {					controller	= new ContainerController(this, data.textWidth, data.textHeight);				} else {					controller	= new ContainerController(this, data.textWidth);				}			} else {				controller	= new ContainerController(this, 2000);			}						textFlow.flowComposer.addController(controller);			textFlow.flowComposer.updateAllControllers();						if(isNaN(data.width) || isNaN(data.height)) {				autoResize();			}		}				private function autoResize():void {			if(!controller) {				return;			}						var invalid:Boolean		= false;			var bounds:Rectangle	= controller.getContentBounds();						if(isNaN(data.width)) {				data.width		= bounds.width;				data.textWidth	= data.width;				invalid			= true;			} else if(isNaN(data.height)) {				data.height		= bounds.height;				data.textHeight	= data.height;				invalid			= true;			}						if(invalid) {				resetFormat();			}		}				private function clean():void {			textFlow.flowComposer.removeAllControllers();						if(data.autoWidth) {				data.width		= NaN;				data.textWidth	= NaN;			}						if(data.autoHeight) {				data.height		= NaN;				data.textHeight	= NaN;			}		}				public function get textWidth():Number {			return data.textWidth;		}		public function set textWidth(value:Number):void {			data.textWidth	= value;			resetFormat();		}				public function get textHeight():Number {			return data.textHeight;		}		public function set textHeight(value:Number):void {			data.textHeight	= value;			resetFormat();		}				public override function set width(value:Number):void {			data.width		= value;			data.autoWidth	= false;						if(isNaN(data.textWidth)) {				data.textWidth	= value;			}						if(isSetup) {				super.width	= value;			}		}				public override function set height(value:Number):void {			data.height		= value;			data.autoHeight	= false;						if(isNaN(data.textHeight)) {				data.textHeight	= value;			}						if(isSetup) {				super.height	= value;			}		}				public function get text():String {			return data.text;		}		public function set text(value:String):void {			data.text		= value;			clean();			textFlow		= TextConverter.importToFlow(value, 'plainTextFormat');			resetFormat();		}				public function get htmlText():String {			return data.htmlText;		}		public function set htmlText(value:String):void {			data.htmlText	= value;			clean();						try {				textFlow		= TextConverter.importToFlow(value, 'textFieldHTMLFormat');//'textFieldHTMLFormat // htmlFormat			}			catch(e:Error) {				textFlow		= TextConverter.importToFlow(value, 'htmlFormat');//'textFieldHTMLFormat // htmlFormat				}						resetFormat();		}				public function get formatText():String {			return data.formatText;		}		public function set formatText(value:String):void {			data.formatText	= value;			clean();			textFlow		= TextConverter.importToFlow(value, 'textLayoutFormat');			resetFormat();		}				public function get align():String {			return data.align;		}		public function set align(value:String):void {			data.align					= value.toLowerCase();			textLayoutFormat.textAlign	= data.align;			resetFormat();		}				public function get backgroundAlpha():Number {			return data.backgroundAlpha;		}		public function set backgroundAlpha(value:Number):void {			data.backgroundAlpha				= value;			textLayoutFormat.backgroundAlpha	= value;			resetFormat();		}				public function get backgroundColor():uint {			return data.backgroundColor;		}		public function set backgroundColor(value:uint):void {			data.backgroundColor				= value;			textLayoutFormat.backgroundColor	= value;			resetFormat();		}				public function get bold():Boolean {			return data.bold;		}		public function set bold(value:Boolean):void {			data.bold	= value;						if(value) {				textLayoutFormat.fontWeight	= 'bold';			} else {				textLayoutFormat.fontWeight	= 'normal';			}						resetFormat();		}				public function get color():uint {			return data.color;		}		public function set color(value:uint):void {			data.color				= value;			textLayoutFormat.color	= data.color;			resetFormat();		}				public function get columns():int {			return data.columns;		}		public function set columns(value:int):void {			data.columns	= value;						if(value == 1) {				textLayoutFormat.columnCount	= 'auto';			} else {				textLayoutFormat.columnCount	= value;			}						resetFormat();		}				public function get columnGap():Number {			return data.columnGap;		}		public function set columnGap(value:Number):void {			data.columnGap	= value;			textLayoutFormat.columnGap	= value;			resetFormat();		}				public function get columnWidth():Number {			return data.columnWidth;		}		public function set columnWidth(value:Number):void {			data.columnWidth	= value;						if(value == 0) {				textLayoutFormat.columnWidth	= 'auto';			} else {				textLayoutFormat.columnWidth	= value;			}						resetFormat();		}				public function get embedFonts():String {			return data.embedFonts;		}		public function set embedFonts(value:String):void {			data.embedFonts	= value;						if(value) {				textLayoutFormat.fontLookup	= 'embeddedCFF';			} else {				textLayoutFormat.fontLookup	= 'device';			}						resetFormat();		}				public function get font():String {			return data.font;		}		public function set font(value:String):void {			data.font					= value;			textLayoutFormat.fontFamily	= data.font;			resetFormat();		}				public function get italic():Boolean {			return data.italic;		}		public function set italic(value:Boolean):void {			data.italic	= value;						if(value) {				textLayoutFormat.fontStyle	= 'italic';			} else {				textLayoutFormat.fontStyle	= 'normal';			}						resetFormat();		}				public function get ignoreWhitespace():Boolean {			return data.ignoreWhitespace;		}		public function set ignoreWhitespace(value:Boolean):void {			data.ignoreWhitespace	= value;						if(value) {				textLayoutFormat.whiteSpaceCollapse	= 'collapse';			} else {				textLayoutFormat.whiteSpaceCollapse	= 'preserve';			}						resetFormat();		}				public function get input():Boolean {			return data.input;		}		public function set input(value:Boolean):void {			data.input	= value;			resetFormat();		}				public override function get rotation():Number {			return data.rotation;		}		public override function set rotation(value:Number):void {			data.rotation	= value;			textLayoutFormat.textRotation;			resetFormat();		}				public function get selectable():Boolean {			return data.selectable;		}		public function set selectable(value:Boolean):void {			data.selectable	= value;			resetFormat();		}				public function get size():Number {			return data.size;		}		public function set size(value:Number):void {			data.size					= value;			textLayoutFormat.fontSize	= data.size;			resetFormat();		}				public function get typeCase():String {			return data.typeCase;		}		public function set typeCase(value:String):void {			data.typeCase	= value.toLowerCase();						switch(data.typeCase) {				case 'upper':					toUpperCase();					break;				case 'lower':					toLowerCase();					break;				case 'smallcaps':					toSmallCaps();					break;				default:					textLayoutFormat.typographicCase	= 'default';					resetFormat();					break;			}		}				public function toLowerCase():void {			textLayoutFormat.typographicCase	= 'lowercase';			resetFormat();		}		public function toUpperCase():void {			textLayoutFormat.typographicCase	= 'uppercase';			resetFormat();		}		public function toSmallCaps():void {			textLayoutFormat.typographicCase	= 'capsToSmallCaps';			resetFormat();		}				public function get underline():Boolean {			return data.underline;		}		public function set underline(value:Boolean):void {			data.underline	= value;						if(value) {				textLayoutFormat.textDecoration	= 'underline';			} else {				textLayoutFormat.textDecoration	= 'none';			}						resetFormat();		}				public function get verticalAlign():String {			return data.verticalAlign;		}		public function set verticalAlign(value:String):void {			data.verticalAlign	= value.toLowerCase();						switch(data.verticalAlign) {				case 'bottom':					textLayoutFormat.verticalAlign	= 'bottom';					break;				case 'justify':					textLayoutFormat.verticalAlign	= 'justify';					break;				case 'middle':					textLayoutFormat.verticalAlign	= 'middle';					break;				case 'top':				default:					textLayoutFormat.verticalAlign	= 'top';					break;			}						resetFormat();		}				public function scrollDown(lines:int=5):void {			var vertY:Number	= controller.verticalScrollPosition;			var compH:Number	= Math.ceil(controller.compositionHeight);			var lineD:Number	= Math.ceil(compH * .5);						if(vertY > 0) {				var lineDelta:Number	= controller.getScrollDelta(lines);				new Tween({target:controller, duration:1.25, verticalScrollPosition:vertY - lineD, ease:Quintic.easeOut});			}		}				public function scrollUp(lines:int=5):void {			var compH:Number	= Math.ceil(controller.compositionHeight);			var vertY:Number	= Math.floor(controller.verticalScrollPosition);			var textH:Number	= Math.floor(contentHeight);			var lineD:Number	= Math.ceil(compH * .5);						if(vertY < (textH - compH)) {				new Tween({target:controller, duration:1.25, verticalScrollPosition:vertY + lineD, ease:Quintic.easeOut});			}		}				public function get isTop():Boolean {			if(controller.verticalScrollPosition == 0) {				return true;			} else {				return false;			}		}				public function get isEnd():Boolean {			if(controller.getScrollDelta(1) == 0) {				return true;			} else {				return false;			}			}				public function get contentWidth():Number {			var rect:Rectangle	= controller.getContentBounds();			return rect.width;		}				public function get contentHeight():Number {			var rect:Rectangle	= controller.getContentBounds();			return rect.height;		}				/** Kill the object and clean from memory. **/		public override function kill():void {			super.kill();		}	}}