/*** Shell Class by Giraldo Rosales.* Visit www.liquidgear.net for documentation and updates.*** Copyright (c) 2009 Nitrogen Design, Inc. All rights reserved.* * Permission is hereby granted, free of charge, to any person* obtaining a copy of this software and associated documentation* files (the "Software"), to deal in the Software without* restriction, including without limitation the rights to use,* copy, modify, merge, publish, distribute, sublicense, and/or sell* copies of the Software, and to permit persons to whom the* Software is furnished to do so, subject to the following* conditions:* * The above copyright notice and this permission notice shall be* included in all copies or substantial portions of the Software.* * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR* OTHER DEALINGS IN THE SOFTWARE.**/package lg.flash.shell {	//Flash Classes	import flash.display.DisplayObject;	import flash.utils.getDefinitionByName;	import flash.events.Event;	import flash.system.Capabilities;	import flash.events.FullScreenEvent;	import flash.external.ExternalInterface;		//LG Classes	import lg.flash.elements.VisualElement;	import lg.flash.model.xmlData;	import lg.flash.view.Page;	import lg.flash.events.ElementEvent;	import lg.flash.events.ModelEvent;	import lg.flash.events.PageEvent;	import lg.flash.components.Throbber;	import lg.flash.utils.LGString;	import lg.flash.track.Analytics;	import lg.flash.utils.LGDebug;		public class Shell extends Page {		/** XML file describing all pages to be loaded. */		public var control:String		= 'XML/control.xml';		/** Indicates if site is running indevelopment mode (Debugging in the Flash IDE). */		public var development:Boolean	= false;		/** Contains the pages in the shell with the id as the key. **/		public var pages:Object			= {};		/** @private **/		public var pageInfo:Vector.<String>			= new Vector.<String>();		/** Number of pages in the site */		public var numPages:int			= 0;		/** Number of pages in the site */		public var tracker:Analytics;		/** Debugger. Use console.on() to turn on the debugger, console.off() to turn it off.		* Once on, you can use trace commands to the <a href="http://demonsterdebugger.com/">De Monster Debugger</a> client with		* the commands, console.log(), console.warn(), and console.error(). **/		public var console:LGDebug;				/** @private **/		private var _siteXML:XML;		/** @private **/		private var _pageData:xmlData		= new xmlData();		/** @private **/		private var _pagesLoaded:int		= 0;		/** @private **/		private var _pagesExt:String		= 'Page';		/** @private **/		private var _id:Vector.<String>				= new Vector.<String>();		/** @private **/		private var _readyToBuild:Vector.<String>	= new Vector.<String>();		/** @private **/		private var _preloader:Page;		/** @private **/		private var _designMode:Boolean		= false;		/** @private **/		private var _completePercent:Number	= 0;		/** @private **/		private var _pageIdx:int			= 0;		/** @private **/		private var _loadIdx:int			= 0;		/** @private **/		private var _firstID:String;		/** @private **/		private var _pages:Object			= {};		/** @private **/		private var _throbber:Throbber;				public function Shell() {			super();		}				protected function load(url:String):void {			control = url;						//Setup			setup();						//Load XML			_pageData.addEventListener(ModelEvent.LOADED, onLoadControl);			_pageData.addEventListener(ModelEvent.ERROR, onErrorControl);			_pageData.load({id:'control', url:control, basePath:basePath});						stage.addEventListener(Event.RESIZE, onResize);			stage.addEventListener(FullScreenEvent.FULL_SCREEN, onFullscreen);		}				/** Indicates the width of the display object, in pixels. **/		public override function get width():Number {			return stage.stageWidth;		}				/** Indicates the height of the display object, in pixels. **/		public override function get height():Number {			return stage.stageHeight;		}				/** @private **/		public function setup():void {			//Setting Environment Type			envCheck();						//Stage Setup			stage.frameRate		= 30;			stage.scaleMode		= 'noScale';			stage.align			= 'TL';						//Security			flash.system.Security.allowDomain('*');		}				/** @private **/		private function envCheck():void {			//Set Environment Type			switch(Capabilities.playerType) {				case 'External':				case 'StandAlone':					development	= true;					break;				default :					development	= false;					break;			}						//Check for development environment set defaults 			if(!development) {				basePath	= (this.loaderInfo.parameters.basePath) ? this.loaderInfo.parameters.basePath : 'flash/';				control		= (this.loaderInfo.parameters.control) ? this.loaderInfo.parameters.control : 'XML/control.xml';				flashVars	= this.loaderInfo.parameters;			}		}				/** @private **/		private function onLoadControl(e:ModelEvent):void {			var ctrlData:Object	= e.data;						_siteXML 	= new XML(ctrlData.data);						var sWidth:int	= int(_siteXML.attribute('width')) == 0 ? stage.stageWidth : int(_siteXML.attribute('width'));			var sHeight:int	= int(_siteXML.attribute('height')) == 0 ? stage.stageHeight : int(_siteXML.attribute('height'));						if(sWidth > 0 && sHeight > 0) {				//Set Stage size				graphics.clear();				graphics.beginFill(0x000000, 0);				graphics.drawRect(0, 0, sWidth, sHeight);				graphics.endFill();			}						data.width	= sWidth;			data.height	= sHeight;						//Cleanup			_pageData.removeEventListener(ModelEvent.LOADED, onLoadControl);			_pageData.removeEventListener(ModelEvent.ERROR, onErrorControl);			_pageData	= null;			ctrlData	= null;						//Build Site			buildSite();		}				/** @private **/		private function onErrorControl(e:ModelEvent):void {						_siteXML 	= null;						//Cleanup			_pageData.removeEventListener(ModelEvent.LOADED, onLoadControl);			_pageData.removeEventListener(ModelEvent.ERROR, onErrorControl);			_pageData	= null;		}				//Load site		public function buildSite():void {			//Add attributes			var attr:XMLList		= _siteXML.attributes();			var attrObj:Object;			var attrName:String;			var attLen:int			= attr.length();			var ignore:Vector.<String>	= new Vector.<String>();			var g:int;						if(development) {				ignore.push('basePath');			}						ignore.push('background');						for(g=0; g<attLen; g++) {				attrObj		= attr[g].name();				attrName	= attrObj.localName;								if(ignore.indexOf(attrName) < 0) {					if(attrName in this) {						this[attrName] = String(attr[g]);					}				}								data[attrName] = String(attr[g]);								attrObj		= null;				attrName	= null;			}						//Set defaults			data.preload	= ('preload' in data && data.preload == 'true') ? true : false;			data.load		= ('load' in data) ? data.load : 'all';			data.xmlPath	= ('xmlPath' in data) ? data.xmlPath : 'XML/Pages/';						if(data.background != undefined) {				buildBackground();			}						//Get languages for localization			if(data.languages != undefined) {				var lang:Array	= data.languages.split(',');				var langLen:int	= lang.length;								for(g=0; g<langLen; g++) {					lang[g]	= LGString.trim(lang[g]);				}								data.languages	= lang;			}						//Build Throbber			if(_siteXML.throbber != undefined) {				var throbObj:Object	= {};								throbObj.color		= (_siteXML.throbber.attribute('color').toString() != '') ? _siteXML.throbber.attribute('color').toString() : 0x808080;				throbObj.speed		= (_siteXML.throbber.attribute('speed').toString() != '') ? Number(_siteXML.throbber.attribute('speed').toString()) : 1000;				throbObj.leafSize	= (_siteXML.throbber.attribute('leafSize').toString() != '') ? Number(_siteXML.throbber.attribute('leafSize').toString()) : 4;				throbObj.leafCount	= (_siteXML.throbber.attribute('leafCount').toString() != '') ? Number(_siteXML.throbber.attribute('leafCount').toString()) : 12;				throbObj.leafRadius	= (_siteXML.throbber.attribute('leafRadius').toString() != '') ? Number(_siteXML.throbber.attribute('leafRadius').toString()) : 10;								buildThrobber(throbObj);			}						//Google Analytics			if(data.analytics) {				data.visualTracker	= (data.visualTracker || data.visualTracker == 'true') ? true : false;				tracker = new Analytics({view:this, id:data.analytics, visual:data.visualTracker});			}						//Pages			_pagesLoaded	= 0;			numPages 		= _siteXML.elements('page').length();						//Start loading page nodes			loadPage();		}				/** @private **/		private function buildThrobber(obj:Object):void {			//Throbber			_throbber	= new Throbber({id:'throbber', position:'center'});			addChild(_throbber);		}				/** @private **/		private function loadPage():void {			var children:XMLList	= _siteXML.elements('page');			var item:XML			= children[_loadIdx];						if(!item) {				return;			}						var pageObj:Object	= {};						//Set defaults			pageObj.basePath	= basePath;			pageObj.packagePath	= 'com.view';			pageObj.ext			= 'Page';			pageObj.flashVars	= {};			pageObj.hidden		= true;			pageObj.src			= '';						//Load page attributes			var attr:XMLList	= item.attributes();			var attLen:int		= attr.length();			var attrObject:Object;			var attrName:String;						//Set flashVars			if(!development) {				pageObj.flashVars	= this.loaderInfo.parameters;			}						//Set xml attributes			for(var g:int=0; g<attLen; g++) {				attrObject			= attr[g].name();				attrName			= attrObject.localName;				pageObj[attrName]	= String(attr[g]);			}						if(pageObj.packagePath != '') {				pageObj.packagePath += '.';			}						attrObject	= null;			attrName	= null;			_pagesExt	= pageObj.ext;						pageObj.name			= pageObj.id + pageObj.ext;			pageObj.shell			= this;			pageObj.width			= width;			pageObj.height			= height;			pageObj.stage			= stage;						_pages[pageObj.id]		= pageObj;						pageInfo.push(pageObj.id);			_readyToBuild.push(pageObj.id);						//Save the first page id			if(_loadIdx == 0) {				_firstID			= pageObj.id;			}						_loadIdx++;						//Load the rest of the page nodes			if(_loadIdx < numPages) {				loadPage();			}			//When done, start building the first page			else if(_loadIdx == numPages) {				buildPage(_firstID);				_firstID	= null;			}		}				/** @private **/		private function buildPage(id:String):Page {			var pageObj:Object		= _pages[id] as Object;						//Create page			var controller:Class	= getDefinitionByName(pageObj.packagePath + pageObj.id + pageObj.ext) as Class;			var page:Page			= new controller(pageObj) as Page;						//Listen for a setup complete call			page.addEventListener('page_loaded', onPageLoad);						//Use specific language is using language support			var langPath:String		= '';						if(data.languages != undefined && data.languages.length > 0) {				var langLen:int			= data.languages.length;				var useDefault:Boolean	= false;								if(langLen > 1) {					var langIdx:int	= data.languages.indexOf(language);										if(langIdx < 0) {						langPath	= data.languages[langIdx];					} else  {						useDefault	= true;					}				} else  {					useDefault	= true;				}								if(useDefault) {					langPath	= data.languages[0];				}								langPath += '/';			}						//Load XML			if(pageObj.src != '') {				page.loadXML(pageObj.src);			} else {				page.loadXML(data.xmlPath + langPath + pageObj.id + 'Page.xml');			}						//Set design mode			if(_designMode) {				page.designMode	= true;			}						//Add page to stage			addChild(page);						pages[pageObj.id]	= page;			_id[_pageIdx]		= pageObj.id;			_pageIdx++;						return page;		}				/** @private **/		private function onPageLoad(e:PageEvent):void {			var page:Page = e.target as Page;						//Cleanup			page.removeEventListener('page_loaded', onPageLoad);						//Adjust alignment			if(page.isSetup) {				page.update({width:stage.stageWidth, height:stage.stageHeight});			}						//Break here if already completed initial load			if(isSetup) {				return;			}						//Build rest of pages			var finishLoad:Boolean	= false;						if(data.load == 'all') {				if(_pageIdx < numPages) {					var pageID:String	= _readyToBuild[_pageIdx];					buildPage(pageID);				}				else if(_pageIdx == numPages) {					_readyToBuild	= null;					finishLoad		= true;				}			} else {				finishLoad	= true;			}						//If finished building, show first page			if(finishLoad) {				isSetup	= true;								if(_throbber) {					_throbber.kill();					removeChild(_throbber);				}								trigger('page_loaded');								var firstPage:Page	= pages[_id[0]] as Page;								if(firstPage.autoOpen) {					firstPage.transitionIn();				}			}		}				/** @private **/		private function getPage(pageName:String):Page {			var page:Page = getChildByName(pageName + _pagesExt) as Page;						if(!page) {				page = buildPage(pageName);			}						return page;		}				//Page Order		public function pageToFront(pageName:String):void {			var page:Page = getPage(pageName);						if(contains(page)) {				setChildIndex(page, numChildren-1);			}						//Cleanup			page = null;		}		public function pageToBack(pageName:String):void {			var page:Page = getPage(pageName);						if(contains(page)) {				setChildIndex(page, 0);			}						//Cleanup			page = null;		}				/** @private **/		private function onResize(e:Event=null):void {			var page:Page;			var pageLen:int	= _id.length;						for(var g:int=0; g<pageLen; g++) {				page = getPage(_id[g]);								if(page.isSetup) {					page.update({width:stage.stageWidth, height:stage.stageHeight});				}			}						if(background) {				background.update();			}		}				private function onFullscreen(e:FullScreenEvent=null):void {			var page:Page;			var pageLen:int	= _id.length;						for(var g:int=0; g<pageLen; g++) {				page = getPage(_id[g]);								if(page.isSetup) {					page.update({width:Capabilities.screenResolutionX, height:Capabilities.screenResolutionY, verticalCenter:false, horizontalCenter:false});				}			}					}				public override function open(pageName:String, obj:Object=null):void {			if(obj && obj.autoClose) {				var closePage:Page		= getPage(obj.closePage);				closePage.data.autoOpen	= true;				closePage.data.openPage	= pageName;				closePage.data.openData	= obj;				closePage.bind('page_close', onPageAutoClose);				closePage.transitionOut();			} else {				var page:Page = getPage(pageName);								//Track				if(tracker) {					tracker.trackPage(pageName);				}								//Set Attributes				for(var s:String in obj) {					if(s in page) {						page[s] = obj[s];					} else {						data[s] = obj[s];					}				}								page.transitionIn();			}		}				/** @private **/		private function onPageAutoClose(e:PageEvent):void {			var page:Page		= e.target as Page;			var openPage:Page	= getPage(page.data.openPage);						if(!openPage) {				return void;			}						//Set Attributes			var obj:Object	= page.data.openData;						for(var s:String in obj) {				if(s in openPage) {					openPage[s] = obj[s];				}				openPage.data[s] = obj[s];			}						openPage.transitionIn();		}				public override function close(pageName:String=null):void {			if(!pageName) {				return;			}						var page:Page = getPage(pageName);			page.transitionOut();		}				public function get queryParams():Object {			var fullurl:String	= ExternalInterface.call('window.location.href.toString');			var query:Array		= [];			var params:Object	= {};						if(fullurl){				query	= fullurl.split('?');								if(query.length > 1) {							var varStr:String	= query[1];					var varsArray:Array	= varStr.split('&');					var qryLen:int		= varsArray.length;										for (var g:int=0; g<qryLen; g++){						var index:int		= 0;						var kvPair:String	= varsArray[g];												if((index = kvPair.indexOf('=')) > 0){							var key:String		= kvPair.substring(0,index);							var value:String	= kvPair.substring(index + 1);							params[key] = value;						}					}				}			}						return params;		}				public function set language(value:String):void {			data.language	= value;		}		public function get language():String {			if(data.language == undefined) {				return Capabilities.language;			} else {				return data.language;			}		}				public override function addChild(element:DisplayObject):DisplayObject {			super.addChild(element);			return element;		}	}}